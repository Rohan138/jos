1. Using different interrupt handlers for different interrupts allows us to distinguish between the events that generate these interrupts and handle them accordingly.
2. No; the softint code calls int 14, but since it is running with user privileges only (DPL = 3), while the softint handler has been inserted into the IDT with DPL 0. Thus, the $int 14$ instruction will actually cause a general protection fault instead, since the user is trying to call an interrupt it is not allowed to call.
3. We need to initialize the IDT entry for the breakpoint interrupt (T_BRKPT == 3) with a DPL level of 3 to allow it to be raised by a user with the same DPL. If we were to set that argument of the SETGATE call to e.g. 0 (kernel DPL) instead, a breakpoint exception would instead be handled by the general protection fault due to the user having insufficient permissions to actually raise the breakpoint interrupt.
4. The DPL settings in the IDT ensure that the user can only raise certain interrupts which can be safely handled without either giving the user program access to memory it is not allowed to access or running malicious code.